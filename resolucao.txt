/* 1 - Alterar tabela débito para alterar situação débito */

UPDATE DEBITOS d
SET SITUACAO_DEBITO = 'Atrasado'
WHERE (CURRENT_DATE > d.DATAVENCIMENTO) 
  AND (d.SITUACAO_DEBITO NOT IN ('Negociado', 'Pago'))

/* 2 - Alterar tabela débito para alterar situação débito */
 
UPDATE DEBITOS D
SET SITUACAO_DEBITO = 'Pendente'
WHERE (CURRENT_DATE <= d.DATAVENCIMENTO) 
  AND (SITUACAO_DEBITO != 'Pago');

 /* 3 - Alterar campo data de vencimento da tabela débito */
 
UPDATE DEBITOS d
SET d.DATAVENCIMENTO = DATEADD(-5 YEAR TO d.DATAVENCIMENTO)
WHERE SITUACAO_DEBITO = 'Negociado';

/* 4 - Selecionar nome, email e telefone de todas as pessoas */

SELECT p.NOME, p.EMAIL, p.TELEFONE 
FROM PESSOA p 

/* 5 - Listar produtos com valor unitário acima de R$100 */

SELECT *
FROM PRODUTO p 
WHERE PRECO_UNITARIO > 100

/* 6 - Selecionar todas as vendas realizadas em determinado período */

SELECT *
FROM VENDA v 
WHERE v.DATA_VENDA = CURRENT_DATE;

/* 7 - Mostrar nome, data de nascimento e idade dos fornecedores que não tem produtos em estoque */

SELECT p.NOME
	 , p.DATA_NASCIMENTO
	 , (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)) AS IDADE
FROM FORNECEDOR f 
INNER JOIN PESSOA p ON p.ID_PESSOA = f.ID_PESSOA 
WHERE f.ID_FORNECEDOR NOT IN (SELECT p2.ID_FORNECEDOR
							  FROM PRODUTO p2
							  WHERE p2.id_fornecedor = f.ID_FORNECEDOR)
							  
UNION	  											  

SELECT p.NOME
	 , p.DATA_NASCIMENTO
	 , (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)) AS IDADE
FROM FORNECEDOR f 
INNER JOIN PESSOA p ON p.ID_PESSOA = f.ID_PESSOA 
LEFT JOIN PRODUTO p2 ON p2.ID_FORNECEDOR = f.ID_FORNECEDOR
WHERE p2.QUANTIDADE_ESTOQUE = 0


/* 8 - Listar clientes que já realizaram compras com débitos vencidos */
					  
SELECT DISTINCT p.*
FROM CLIENTE c 
LEFT JOIN DEBITOS d ON d.ID_CLIENTE = c.ID_CLIENTE 
LEFT JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA 
WHERE d.SITUACAO_DEBITO = 'Atrasado'

/* 9 - Laís faiou */

/* 10 - Selecionar os 10 maiores devedores */

SELECT FIRST 10
		d.ID_CLIENTE,
		p.NOME,
		(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)) AS IDADE,
		(SELECT SUM(d2.VALOR_TOTAL)
      	   FROM DEBITOS d2
      	   WHERE d2.ID_CLIENTE = d.ID_CLIENTE 
      	   AND d2.DATAVENCIMENTO < CURRENT_DATE) AS DEBITO_VENCIDO,
      	COALESCE ((SELECT SUM(d3.VALOR_TOTAL)
      	   FROM DEBITOS d3
      	   WHERE d3.ID_CLIENTE = d.ID_CLIENTE 
       	   AND d3.SITUACAO_DEBITO = 'Pago'), 0) AS DEBITO_PAGO
FROM DEBITOS d
LEFT JOIN CLIENTE c ON c.ID_CLIENTE = d.ID_CLIENTE 
LEFT JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA
GROUP BY d.ID_CLIENTE, p.NOME, IDADE
ORDER BY DEBITO_VENCIDO DESC

/* 11 - Atualizar o preço unitário de produtos com estoque inferior a 10 unidades para mais 10% */

UPDATE PRODUTO 
SET PRECO_UNITARIO = PRECO_UNITARIO + (PRECO_UNITARIO * 0.1)
WHERE QUANTIDADE_ESTOQUE < 10

/* 12 - Laís faiou again */

/* 13 - Alterar todos os débitos que estão como atrasados para pagos se o mesmo ter o registro na tabela pagamento */

UPDATE DEBITOS d
SET d.SITUACAO_DEBITO = 'Pagos'
WHERE d.ID_DEBITO IN (SELECT p.ID_DEBITO FROM PAGAMENTO p WHERE d.SITUACAO_DEBITO = 'Atrasado')

/* 14 - Laís faiou triple */

/* 15 - Selecionar as vendas na janela entre dezembro de 2023 e janeiro de 2024 */

SELECT *
FROM VENDA v
WHERE v.DATA_VENDA BETWEEN '2023-12-01' AND '2024-01-31'

/* 16 - Liste os produtos com estoque entre 5 e 20 unidades */

SELECT *
FROM PRODUTO p 
WHERE p.QUANTIDADE_ESTOQUE BETWEEN 5 AND 20

/* 17 - Retornar todas as pessoas que começam com "A" */

SELECT *
FROM PESSOA p 
WHERE p.NOME STARTING WITH 'A'

/* 18 - Selecionar todos os produtos que não foram vendidos */

SELECT p.NOME, p.QUANTIDADE_ESTOQUE 
FROM PRODUTO p
WHERE p.ID_PRODUTO NOT IN (SELECT i.ID_PRODUTO 
						   FROM ITENSVENDA i)

/* 19 - Liste os produtos vendidos para os clientes 'Carla Souza' e 'Larissa Ferreira' */

SELECT p.ID_PESSOA, p.NOME AS CLIENTE, p.EMAIL, p.TELEFONE ,prod.NOME AS PRODUTO, vend.DATA_VENDA, vend.VALOR_TOTAL 
FROM ITENSVENDA v 
LEFT JOIN VENDA vend ON vend.ID_VENDA = v.ID_VENDA
LEFT JOIN PESSOA p ON p.ID_PESSOA = vend.ID_PESSOA 
LEFT JOIN PRODUTO prod ON prod.ID_PRODUTO = v.ID_PRODUTO 
WHERE p.NOME IN ('Carla Souza', 'Larissa Ferreira')

/* 20 - Mostrar as pessoas que são clientes ou fornecedores */

SELECT DISTINCT p.NOME,
	CASE 
		WHEN c.ID_PESSOA IS NOT NULL AND f.ID_PESSOA IS NOT NULL THEN 'Cliente e fornecedor'
		WHEN c.ID_PESSOA IS NOT NULL THEN 'Cliente'
		WHEN f.ID_PESSOA IS NOT NULL THEN 'Fornecedor'
	END AS OCUPACAO
FROM PESSOA p
LEFT JOIN CLIENTE c ON p.ID_PESSOA = c.ID_PESSOA
LEFT JOIN FORNECEDOR f ON p.ID_PESSOA = f.ID_PESSOA
WHERE c.ID_PESSOA IS NOT NULL OR f.ID_PESSOA IS NOT NULL

/* 21 - Retornar informações de venda com detalhes do cliente e forma de pagamento */

SELECT v.DATA_VENDA, v.VALOR_TOTAL,  fp.DESCRICAO AS FORMA_PAGAMENTO, p.NOME AS NOME_CLIENTE, p.EMAIL, p.TELEFONE
FROM VENDA v 
LEFT JOIN PESSOA p ON p.ID_PESSOA = v.ID_PESSOA 
INNER JOIN FORMA_PAGAMENTO fp ON fp.ID_FORMA_PAGAMENTO = v.ID_FORMA_PAGAMENTO 

/* 22 - Mostrar todas as compras do produto "Placa de Captura", incluindo detalhes do produto */

SELECT i.*, p.NOME AS PRODUTO, p.DESCRICAO, p.PRECO_UNITARIO, p.QUANTIDADE_ESTOQUE 
FROM ITENSVENDA i 
LEFT JOIN PRODUTO p ON p.ID_PRODUTO = i.ID_PRODUTO 
WHERE p.NOME = 'Placa de Captura'

/* 23 - Combinar nomes de fornecedores e clientes junto as idades que irão ter em 2025 */

SELECT DISTINCT p.NOME, (2025 - (EXTRACT(YEAR FROM p.DATA_NASCIMENTO))) AS IDADE_EM_2025
FROM PESSOA p 
LEFT JOIN CLIENTE c ON c.ID_PESSOA = p.ID_PESSOA
LEFT JOIN FORNECEDOR f ON f.ID_PESSOA = p.ID_PESSOA 
WHERE f.ID_PESSOA IS NOT NULL OR c.ID_PESSOA IS NOT NULL

/* 24 - Retornar TODOS os logradouros e bairros, retornando também se pertence a alguma pessoa */

SELECT l.NOME AS LOGRADOURO, b.NOME AS BAIRRO, b.CEP, p.NOME AS PROPRIETARIO
FROM ENDERECO e 
LEFT JOIN LOGRADOURO l ON l.ID_LOGRADOURO = e.ID_LOGRADOURO 
LEFT JOIN BAIRRO b ON b.ID_BAIRRO = e.ID_BAIRRO 
LEFT JOIN PESSOA p ON p.ID_PESSOA = e.ID_PESSOA 

/* 25 - Selecionar produtos que possuem preço unitário superior a média */

SELECT p.NOME AS PRODUTO, p.DESCRICAO, p.PRECO_UNITARIO, p.QUANTIDADE_ESTOQUE 
FROM PRODUTO p
WHERE p.PRECO_UNITARIO > (SELECT AVG(p2.PRECO_UNITARIO) FROM PRODUTO p2)

/* 26 - Listar clientes que fizeram compras em cidades com mais de 1 milhão de habitantes */

SELECT DISTINCT p.NOME, p.EMAIL, p.TELEFONE, m.NOME AS CIDADE, m.POPULACAO 
FROM PESSOA p 
LEFT JOIN CLIENTE c ON c.ID_PESSOA = p.ID_PESSOA 
LEFT JOIN ENDERECO e ON e.ID_PESSOA = c.ID_PESSOA
LEFT JOIN MUNICIPIO m ON m.ID_MUNICIPIO = e.ID_MUNICIPIO
WHERE c.ID_PESSOA IS NOT NULL 
  AND m.POPULACAO > 1000000;
 
/* 27 - Motrar quantidade total de produtos vendidos por fornecedor */

SELECT p2.NOME AS FORNECEDOR, SUM(QUANTIDADE_ESTOQUE) AS PRODUTOS_VENDIDOS
FROM PRODUTO p
LEFT JOIN FORNECEDOR f ON f.ID_FORNECEDOR = p.ID_FORNECEDOR 
LEFT JOIN PESSOA p2 ON p2.ID_PESSOA = f.ID_PESSOA 
GROUP BY p2.NOME

/* 28 - Listar os clientes que realizaram compras com valor total superior a R$500 */

SELECT p.NOME AS CLIENTE, v.DATA_VENDA, v.VALOR_TOTAL
FROM CLIENTE c 
LEFT JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA 
LEFT JOIN VENDA v ON v.ID_PESSOA = p.ID_PESSOA 
WHERE v.VALOR_TOTAL > 500

/* 29 - Retornar todas as pessoas e seus endereços */

SELECT p.NOME, m.NOME AS MUNICIPIO, b.NOME AS BAIRRO, l.NOME AS LOGRADOURO
FROM PESSOA p 
JOIN ENDERECO e ON e.ID_PESSOA = p.ID_PESSOA 
JOIN MUNICIPIO m ON m.ID_MUNICIPIO = e.ID_MUNICIPIO 
JOIN BAIRRO b ON b.ID_MUNICIPIO = e.ID_MUNICIPIO 
JOIN LOGRADOURO l ON l.ID_LOGRADOURO = e.ID_LOGRADOURO

/* 30 - Liste o produto, juntamente a seus preços e o nome for fornecedor, mesmo que não tenha */

SELECT p.NOME AS PRODUTO, p.PRECO_UNITARIO, p2.NOME AS FORNECEDOR
FROM PRODUTO p 
LEFT JOIN FORNECEDOR f ON f.ID_FORNECEDOR = p.ID_FORNECEDOR 
LEFT JOIN PESSOA p2 ON p2.ID_PESSOA = f.ID_PESSOA 

/* 31 - Liste os produtos em ordem decrescente de quantidade em estoque */

SELECT p.NOME AS PRODUTO, p.QUANTIDADE_ESTOQUE 
FROM PRODUTO p 
ORDER BY p.QUANTIDADE_ESTOQUE DESC

/* 32 - Retorne as vendas em ordem crescente de valor total */

SELECT v.*
FROM VENDA v
ORDER BY v.VALOR_TOTAL ASC

/* 33 - Listar os produtos com quantidade em estoque menor que a média de todos os produtos */

SELECT p.NOME AS PRODUTO, p.QUANTIDADE_ESTOQUE 
FROM PRODUTO p 
WHERE p.QUANTIDADE_ESTOQUE < (SELECT AVG(p2.QUANTIDADE_ESTOQUE) FROM PRODUTO p2)
ORDER BY p.QUANTIDADE_ESTOQUE ASC

/* 34 - Selecionar todas as pessoas cujo número de telefone é igual a de outra pessoa */

SELECT p.NOME AS PESSOA, p.TELEFONE 
FROM PESSOA p 
WHERE p.TELEFONE IN (SELECT p2.TELEFONE 
    				 FROM PESSOA p2 
					 WHERE p2.ID_PESSOA != p.ID_PESSOA)
					 
/* 35 - Aumentar em 10% o preço unitário de fornecedores de São Paulo */

UPDATE PRODUTO p
SET p.PRECO_UNITARIO = p.PRECO_UNITARIO + (p.PRECO_UNITARIO * 0.1)
WHERE p.ID_FORNECEDOR IN (
	SELECT f.ID_FORNECEDOR
	FROM FORNECEDOR f
	LEFT JOIN PESSOA p2 ON p2.ID_PESSOA = f.ID_PESSOA 
	LEFT JOIN ENDERECO e ON e.ID_PESSOA = p2.ID_PESSOA 
	LEFT JOIN MUNICIPIO m ON m.ID_MUNICIPIO = e.ID_MUNICIPIO 
	WHERE m.NOME = 'São Paulo'
) 

/* 36 - Listar todas as vendas com status de débito igual a "Negociado" */

SELECT v.ID_VENDA, V.DATA_VENDA, V.VALOR_TOTAL, d.SITUACAO_DEBITO 
FROM VENDA v 
LEFT JOIN DEBITOS d ON d.ID_VENDA = v.ID_VENDA 
WHERE d.SITUACAO_DEBITO = 'Negociado'
